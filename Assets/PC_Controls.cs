//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/PC_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PC_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PC_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PC_Controls"",
    ""maps"": [
        {
            ""name"": ""Player1Controls"",
            ""id"": ""2cadb3de-fb07-44a9-ba0a-971be22204d3"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""cc49adab-a915-4219-a357-a6197c1dbc95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""d6040b87-7554-471c-8d48-fb1e18099b47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMenu"",
                    ""type"": ""Button"",
                    ""id"": ""454bb66a-fcfb-49cd-a12e-c51df892165c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5909b8c-cadf-4aac-95ec-e1c301027566"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eef31664-9650-4266-91b3-96856cb7cebb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d70a79cc-390a-453f-95c5-8394a7592525"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2Controls"",
            ""id"": ""50d2b34b-fc26-4fad-ae78-a82f39ebc6d2"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""8643f727-2d18-458c-ab39-d3815cf2b2e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""5790d9b7-71c4-4b54-b3f5-9e7d4b5253b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe870059-dac8-40a3-a78b-f6858db8b1b1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc54be52-bde9-4af8-8a23-1139944ceaab"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player1Controls
        m_Player1Controls = asset.FindActionMap("Player1Controls", throwIfNotFound: true);
        m_Player1Controls_MoveUp = m_Player1Controls.FindAction("MoveUp", throwIfNotFound: true);
        m_Player1Controls_MoveDown = m_Player1Controls.FindAction("MoveDown", throwIfNotFound: true);
        m_Player1Controls_OpenMenu = m_Player1Controls.FindAction("OpenMenu", throwIfNotFound: true);
        // Player2Controls
        m_Player2Controls = asset.FindActionMap("Player2Controls", throwIfNotFound: true);
        m_Player2Controls_MoveUp = m_Player2Controls.FindAction("MoveUp", throwIfNotFound: true);
        m_Player2Controls_MoveDown = m_Player2Controls.FindAction("MoveDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1Controls
    private readonly InputActionMap m_Player1Controls;
    private IPlayer1ControlsActions m_Player1ControlsActionsCallbackInterface;
    private readonly InputAction m_Player1Controls_MoveUp;
    private readonly InputAction m_Player1Controls_MoveDown;
    private readonly InputAction m_Player1Controls_OpenMenu;
    public struct Player1ControlsActions
    {
        private @PC_Controls m_Wrapper;
        public Player1ControlsActions(@PC_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_Player1Controls_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Player1Controls_MoveDown;
        public InputAction @OpenMenu => m_Wrapper.m_Player1Controls_OpenMenu;
        public InputActionMap Get() { return m_Wrapper.m_Player1Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer1ControlsActions instance)
        {
            if (m_Wrapper.m_Player1ControlsActionsCallbackInterface != null)
            {
                @MoveUp.started -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnMoveDown;
                @OpenMenu.started -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnOpenMenu;
                @OpenMenu.performed -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnOpenMenu;
                @OpenMenu.canceled -= m_Wrapper.m_Player1ControlsActionsCallbackInterface.OnOpenMenu;
            }
            m_Wrapper.m_Player1ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @OpenMenu.started += instance.OnOpenMenu;
                @OpenMenu.performed += instance.OnOpenMenu;
                @OpenMenu.canceled += instance.OnOpenMenu;
            }
        }
    }
    public Player1ControlsActions @Player1Controls => new Player1ControlsActions(this);

    // Player2Controls
    private readonly InputActionMap m_Player2Controls;
    private IPlayer2ControlsActions m_Player2ControlsActionsCallbackInterface;
    private readonly InputAction m_Player2Controls_MoveUp;
    private readonly InputAction m_Player2Controls_MoveDown;
    public struct Player2ControlsActions
    {
        private @PC_Controls m_Wrapper;
        public Player2ControlsActions(@PC_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_Player2Controls_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Player2Controls_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Player2Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer2ControlsActions instance)
        {
            if (m_Wrapper.m_Player2ControlsActionsCallbackInterface != null)
            {
                @MoveUp.started -= m_Wrapper.m_Player2ControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_Player2ControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_Player2ControlsActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_Player2ControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_Player2ControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_Player2ControlsActionsCallbackInterface.OnMoveDown;
            }
            m_Wrapper.m_Player2ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
            }
        }
    }
    public Player2ControlsActions @Player2Controls => new Player2ControlsActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayer1ControlsActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnOpenMenu(InputAction.CallbackContext context);
    }
    public interface IPlayer2ControlsActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
}
