//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/PC_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PC_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PC_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PC_Controls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""7670428f-5b33-4e48-bd79-013a4c30b439"",
            ""actions"": [
                {
                    ""name"": ""P1MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""96999084-ee8c-426f-886b-b3bfd3bbc71e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""9965ae87-e7e8-4e0d-9155-b8718867d091"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""910f207a-280a-47dc-92f7-385e907012f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""4b0099f0-5d2e-47fb-937a-ef5d08be7dc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMenu"",
                    ""type"": ""Button"",
                    ""id"": ""32ef13c1-5183-426c-863d-6e341d3f6756"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""134894b5-1fbd-4cb0-b538-61596c7a072e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""572581af-3e3e-46f1-9f4f-ff7591a3d9c8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""418d7a85-e906-45c2-930e-414983f66325"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23f0d91f-c534-4b9a-8d69-ab0c287d3bd6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccb16c1b-a1d1-4ccc-8cf2-499f1422738b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_P1MoveUp = m_Game.FindAction("P1MoveUp", throwIfNotFound: true);
        m_Game_P1MoveDown = m_Game.FindAction("P1MoveDown", throwIfNotFound: true);
        m_Game_P2MoveUp = m_Game.FindAction("P2MoveUp", throwIfNotFound: true);
        m_Game_P2MoveDown = m_Game.FindAction("P2MoveDown", throwIfNotFound: true);
        m_Game_OpenMenu = m_Game.FindAction("OpenMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_P1MoveUp;
    private readonly InputAction m_Game_P1MoveDown;
    private readonly InputAction m_Game_P2MoveUp;
    private readonly InputAction m_Game_P2MoveDown;
    private readonly InputAction m_Game_OpenMenu;
    public struct GameActions
    {
        private @PC_Controls m_Wrapper;
        public GameActions(@PC_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @P1MoveUp => m_Wrapper.m_Game_P1MoveUp;
        public InputAction @P1MoveDown => m_Wrapper.m_Game_P1MoveDown;
        public InputAction @P2MoveUp => m_Wrapper.m_Game_P2MoveUp;
        public InputAction @P2MoveDown => m_Wrapper.m_Game_P2MoveDown;
        public InputAction @OpenMenu => m_Wrapper.m_Game_OpenMenu;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @P1MoveUp.started -= m_Wrapper.m_GameActionsCallbackInterface.OnP1MoveUp;
                @P1MoveUp.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnP1MoveUp;
                @P1MoveUp.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnP1MoveUp;
                @P1MoveDown.started -= m_Wrapper.m_GameActionsCallbackInterface.OnP1MoveDown;
                @P1MoveDown.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnP1MoveDown;
                @P1MoveDown.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnP1MoveDown;
                @P2MoveUp.started -= m_Wrapper.m_GameActionsCallbackInterface.OnP2MoveUp;
                @P2MoveUp.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnP2MoveUp;
                @P2MoveUp.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnP2MoveUp;
                @P2MoveDown.started -= m_Wrapper.m_GameActionsCallbackInterface.OnP2MoveDown;
                @P2MoveDown.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnP2MoveDown;
                @P2MoveDown.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnP2MoveDown;
                @OpenMenu.started -= m_Wrapper.m_GameActionsCallbackInterface.OnOpenMenu;
                @OpenMenu.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnOpenMenu;
                @OpenMenu.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnOpenMenu;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @P1MoveUp.started += instance.OnP1MoveUp;
                @P1MoveUp.performed += instance.OnP1MoveUp;
                @P1MoveUp.canceled += instance.OnP1MoveUp;
                @P1MoveDown.started += instance.OnP1MoveDown;
                @P1MoveDown.performed += instance.OnP1MoveDown;
                @P1MoveDown.canceled += instance.OnP1MoveDown;
                @P2MoveUp.started += instance.OnP2MoveUp;
                @P2MoveUp.performed += instance.OnP2MoveUp;
                @P2MoveUp.canceled += instance.OnP2MoveUp;
                @P2MoveDown.started += instance.OnP2MoveDown;
                @P2MoveDown.performed += instance.OnP2MoveDown;
                @P2MoveDown.canceled += instance.OnP2MoveDown;
                @OpenMenu.started += instance.OnOpenMenu;
                @OpenMenu.performed += instance.OnOpenMenu;
                @OpenMenu.canceled += instance.OnOpenMenu;
            }
        }
    }
    public GameActions @Game => new GameActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IGameActions
    {
        void OnP1MoveUp(InputAction.CallbackContext context);
        void OnP1MoveDown(InputAction.CallbackContext context);
        void OnP2MoveUp(InputAction.CallbackContext context);
        void OnP2MoveDown(InputAction.CallbackContext context);
        void OnOpenMenu(InputAction.CallbackContext context);
    }
}
